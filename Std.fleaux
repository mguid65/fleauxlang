import StdBuiltins;

// Based on constants provided by boost: https://www.boost.org/doc/libs/1_74_0/boost/math/constants/constants.hpp
let Std.Half(): Number :: 0.5000000000000000000000000000000000000e-01;
let Std.Third(): Number :: 3.333333333333333333333333333333333333e-01;
let Std.TwoThirds(): Number :: 6.666666666666666666666666666666666666e-01;
let Std.Sixth(): Number :: 1.666666666666666666666666666666666666e-01;
let Std.ThreeQuarters(): Number :: 7.500000000000000000000000000000000000e-01;
let Std.RootTwo(): Number :: 1.414213562373095048801688724209698078e+00;
let Std.RootThree(): Number :: 1.732050807568877293527446341505872366e+00;
let Std.HalfRootTwo(): Number :: 7.071067811865475244008443621048490392e-01;
let Std.LnTwo(): Number :: 6.931471805599453094172321214581765680e-01;
let Std.LnLnTwo(): Number :: -3.665129205816643270124391582326694694e-01;
let Std.RootLnFour(): Number :: 1.177410022515474691011569326459699637e+00;
let Std.OneDivRootTwo(): Number :: 7.071067811865475244008443621048490392e-01;
let Std.Pi(): Number :: 3.141592653589793238462643383279502884e+00;
let Std.HalfPi(): Number :: 1.570796326794896619231321691639751442e+00;
let Std.ThirdPi(): Number :: 1.047197551196597746154214461093167628e+00;
let Std.SixthPi(): Number :: 5.235987755982988730771072305465838140e-01;
let Std.TwoPi(): Number :: 6.283185307179586476925286766559005768e+00;
let Std.Tau(): Number :: 6.283185307179586476925286766559005768e+00;
let Std.TwoThirdsPi(): Number :: 2.094395102393195492308428922186335256e+00;
let Std.ThreeQuartersPi(): Number :: 2.356194490192344928846982537459627163e+00;
let Std.FourThirdsPi(): Number :: 4.188790204786390984616857844372670512e+00;
let Std.OneDivTwoPi(): Number :: 1.591549430918953357688837633725143620e-01;
let Std.OneDivRootTwoPi(): Number :: 3.989422804014326779399460599343818684e-01;
let Std.RootPi(): Number :: 1.772453850905516027298167483341145182e+00;
let Std.RootHalfPi(): Number :: 1.253314137315500251207882642405522626e+00;
let Std.RootTwoPi(): Number :: 2.506628274631000502415765284811045253e+00;
let Std.LogRootTwoPi(): Number :: 9.189385332046727417803297364056176398e-01;
let Std.OneDivRootPi(): Number :: 5.641895835477562869480794515607725858e-01;
let Std.RootOneDivPi(): Number :: 5.641895835477562869480794515607725858e-01;
let Std.PiMinusThree(): Number :: 1.415926535897932384626433832795028841e-01;
let Std.FourMinusPi(): Number :: 8.584073464102067615373566167204971158e-01;
let Std.PiPowE(): Number :: 2.245915771836104547342715220454373502e+01;
let Std.PiSqr(): Number :: 9.869604401089358618834490999876151135e+00;
let Std.PiSqrDivSix(): Number :: 1.644934066848226436472415166646025189e+00;
let Std.PiCubed(): Number :: 3.100627668029982017547631506710139520e+01;
let Std.CbrtPi(): Number :: 1.464591887561523263020142527263790391e+00;
let Std.OneDivCbrtPi(): Number :: 6.827840632552956814670208331581645981e-01;
let Std.Log2E(): Number :: 1.44269504088896340735992468100189213742664595415298;
let Std.E(): Number :: 2.718281828459045235360287471352662497e+00;
let Std.ExpMinusHalf(): Number :: 6.065306597126334236037995349911804534e-01;
let Std.ExpMinusOne(): Number :: 3.678794411714423215955237701614608674e-01;
let Std.EPowPi(): Number :: 2.314069263277926900572908636794854738e+01;
let Std.RootE(): Number :: 1.648721270700128146848650787814163571e+00;
let Std.Log10E(): Number :: 4.342944819032518276511289189166050822e-01;
let Std.OneDivLog10E(): Number :: 2.302585092994045684017991454684364207e+00;
let Std.LnTen(): Number :: 2.302585092994045684017991454684364207e+00;
let Std.Degree(): Number :: 1.745329251994329576923690768488612713e-02;
let Std.Radian(): Number :: 5.729577951308232087679815481410517033e+01;
let Std.SinOne(): Number :: 8.414709848078965066525023216302989996e-01;
let Std.CosOne(): Number :: 5.403023058681397174009366074429766037e-01;
let Std.SinhOne(): Number :: 1.175201193643801456882381850595600815e+00;
let Std.CoshOne(): Number :: 1.543080634815243778477905620757061682e+00;
let Std.Phi(): Number :: 1.618033988749894848204586834365638117e+00;
let Std.LnPhi(): Number :: 4.812118250596034474977589134243684231e-01;
let Std.OneDivLnPhi(): Number :: 2.078086921235027537601322606117795767e+00;
let Std.Euler(): Number :: 5.772156649015328606065120900824024310e-01;
let Std.OneDivEuler(): Number :: 1.732454714600633473583025315860829681e+00;
let Std.EulerSqr(): Number :: 3.331779238077186743183761363552442266e-01;
let Std.ZetaTwo(): Number :: 1.644934066848226436472415166646025189e+00;
let Std.ZetaThree(): Number :: 1.202056903159594285399738161511449990e+00;
let Std.Catalan(): Number :: 9.159655941772190150546035149323841107e-01;
let Std.Glaisher(): Number :: 1.282427129100622636875342568869791727e+00;
let Std.Khinchin(): Number :: 2.685452001065306445309714835481795693e+00;
let Std.ExtremeValueSkewness(): Number :: 1.139547099404648657492793019389846112e+00;
let Std.RayleighSkewness(): Number :: 6.311106578189371381918993515442277798e-01;
let Std.RayleighKurtosis(): Number :: 3.245089300687638062848660410619754415e+00;
let Std.RayleighKurtosisExcess(): Number :: 2.450893006876380628486604106197544154e-01;
let Std.TwoDivPi(): Number :: 6.366197723675813430755350534900574481e-01;
let Std.RootTwoDivPi(): Number :: 7.978845608028653558798921198687637369e-01;
let Std.QuarterPi(): Number :: 0.785398163397448309615660845819875721049292;
let Std.InvPi(): Number :: 0.3183098861837906715377675267450287240689192;
let Std.TwoDivRootPi(): Number :: 1.12837916709551257389615890312154517168810125;

let Std.Println(args: Any...) : Tuple(Any...) :: __builtin__;
let Std.Printf(fmt_str: String, args: Any...) : Tuple(String, Any...) :: __builtin__;
let Std.In(count: Number) : Tuple(Any...) :: __builtin__;
let Std.Add(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Subtract(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Multiply(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Divide(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Mod(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Pow(lhs: Number, rhs: Number) : Number :: __builtin__;
let Std.Sqrt(val: Number) : Number :: __builtin__;
let Std.Tan(val: Number) : Number :: __builtin__;
let Std.Sin(val: Number) : Number :: __builtin__;
let Std.Cos(val: Number) : Number :: __builtin__;
let Std.GreaterThan(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.LessThan(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.GreaterOrEqual(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.LessOrEqual(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.Equal(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.NotEqual(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.Not(val: Any) : Any :: __builtin__;
let Std.And(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.Or(lhs: Any, rhs: Any) : Bool :: __builtin__;
let Std.UnaryPlus(val: Any) : Any :: __builtin__;
let Std.UnaryMinus(val: Any) : Any :: __builtin__;
let Std.ToString(val: Any) : String :: __builtin__;
// @brief Take the first `count` items from `tuple` and return them as a new Tuple
// ((1, 2, 3, 4), 2) -> Std.Take;
// Result: (1, 2)
let Std.Take(tuple: Tuple(Any...), count: Number) : Tuple(Any...) :: __builtin__;
// @brief Drop the first `count` items from `tuple` and return the remaining elements as a new Tuple
// ((1, 2, 3, 4), 2) -> Std.Drop;
// Result: (3, 4)
let Std.Drop(tuple: Tuple(Any...), count: Number) : Tuple(Any...) :: __builtin__;
// @brief Get the element at position `count` in `tuple`
// ((1, 2, 3, 4), 2) -> Std.ElementAt;
// Result: 3
let Std.ElementAt(tuple: Tuple(Any...), count: Number) : Any :: __builtin__;