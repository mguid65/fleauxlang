Program:
  statements*=Statement;

Statement:
  (ImportStatement | LetStatement | ExpressionStatement) ';';

ImportStatement:
  'import' module_name=Identifier;

OptionallyQualifiedId:
  QualifiedId | Identifier;

LetStatement:
    'let' id=OptionallyQualifiedId '(' params=ParameterDeclList ')' ':' rtype=Type DeclarationDefinitionSeparator (expr=Expression | expr='__builtin__');

DeclarationDefinitionSeparator:
    '::' | '=';

ExpressionStatement:
  expr=Expression;

ParameterDeclList:
  params*=Parameter[','];

Parameter:
  param_name=Identifier ':' type=Type;

TypeList:
  types*=Type[','];

Type:
  ('Number' |
  'String' |
  'Bool' |
  'Null' |
  'Any' |
  Identifier |
  QualifiedId |
  TupleType) '...'?;

TupleType:
  'Tuple' '(' TypeList ')';

Expression:
  expr=FlowExpression |
  expr=TermExpression;

FlowExpression:
  lhs=ParenthesizedExpression '->' rhs=OpOrGraphId;

OpOrGraphId:
  qualified_var=QualifiedId |
  var=Identifier |
  op=Operator;

Operator:
  '^'|
  '//'|
  '*'|
  '%'|
  '+'|
  '-'|
  '=='|
  '!='|
  '<'|
  '>'|
  '>='|
  '<='|
  '!'|
  '&&' |
  '||';

DelimitedExpression:
  exprs*=Expression[','];

TermExpression:
  expr=Term;

Term:
  constant=Constant |
  qualified_var=QualifiedId |
  var=Identifier |
  ParenthesizedExpression;

ParenthesizedExpression:
  '(' expr=DelimitedExpression ')';

QualifiedId:
  qualifier=Qualifier id=Identifier;

Qualifier:
  qualifier=Identifier '.';

Identifier:
  !Keyword ID;

Constant:
  val=NUMBER | val=STRING | val=BOOL | val='null';

Keyword: 'let' |
         'Number' |
         'String' |
         'Bool' |
         'Null' |
         'True' |
         'False' |
         'Any' |
         'Tuple' |
         '__builtin__';

Comment: /\/\/.*/;